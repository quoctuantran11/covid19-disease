{"version":3,"sources":["api/api.js","components/Card.jsx","components/Chart.jsx","components/CountryDropdown.jsx","assets/images/banner.png","App.js","index.js"],"names":["fetchData","countryName","a","axios","get","res","data","confirmedTotal","recoveredTotal","deathTotal","confirmedNew","recoveredNew","deathNew","casesArray","chartDate","countriesName","Object","keys","forEach","name","countryData","latest_date","length","country","includes","elIndex","findIndex","el","total","recovered","death","active","push","infectedTotal","infectedNew","console","log","Card","fetchedData","useContext","AppContext","className","id","toLocaleString","Chart","props","LineChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","CountryDropDown","setName","Autocomplete","autoHighlight","sx","onChange","event","value","options","renderInput","params","TextField","label","createContext","undefined","App","useState","fetch","SetFetch","loading","SetLoading","useEffect","then","src","banner","alt","Provider","animation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d808697e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const fetchData = async (countryName) => {\r\n  try {\r\n    const res = await axios.get('https://pomber.github.io/covid19/timeseries.json')\r\n    const data = res.data\r\n\r\n    let confirmedTotal = 0, infectedTotal = 0, recoveredTotal = 0, deathTotal = 0,\r\n      confirmedNew = 0, infectedNew = 0, recoveredNew = 0, deathNew = 0\r\n    var latest_date, casesArray = []\r\n\r\n    const chartDate = [\"2020-1-22\", \"2020-5-24\", \"2020-8-14\", \"2021-1-25\", \"2021-5-1\", \"2021-8-14\", \"2022-1-1\", \"2022-3-10\", \"2022-3-19\"]\r\n\r\n    const countriesName = Object.keys(data)\r\n\r\n    if (countryName === 'Thế giới') {\r\n      countriesName.forEach((name) => {\r\n        const countryData = data[name]\r\n        latest_date = countryData[countryData.length - 1][\"date\"]\r\n\r\n        confirmedTotal += countryData[countryData.length - 1][\"confirmed\"]\r\n        recoveredTotal += countryData[countryData.length - 1][\"recovered\"]\r\n        deathTotal += countryData[countryData.length - 1][\"deaths\"]\r\n\r\n        confirmedNew += (countryData[countryData.length - 1][\"confirmed\"] - countryData[countryData.length - 2][\"confirmed\"])\r\n        recoveredNew += (countryData[countryData.length - 1][\"recovered\"] - countryData[countryData.length - 2][\"recovered\"])\r\n        deathNew += (countryData[countryData.length - 1][\"deaths\"] - countryData[countryData.length - 2][\"deaths\"])\r\n      \r\n        countryData.forEach((country) => {\r\n          if (chartDate.includes(country[\"date\"])) {\r\n            var elIndex = casesArray.findIndex(el => el.name === country[\"date\"])\r\n            if(elIndex !== -1)\r\n            {\r\n              casesArray[elIndex].total += country[\"confirmed\"]\r\n              casesArray[elIndex].recovered += country[\"recovered\"]\r\n              casesArray[elIndex].death += country[\"deaths\"]\r\n              casesArray[elIndex].active += country[\"confirmed\"] - (country[\"recovered\"] + country[\"deaths\"])\r\n            }\r\n            else\r\n            {\r\n              const data = {\r\n                name: country[\"date\"],\r\n                total: country[\"confirmed\"],\r\n                active: country[\"confirmed\"] - (country[\"recovered\"] + country[\"deaths\"]),\r\n                recovered: country[\"recovered\"],\r\n                death: country[\"deaths\"]\r\n              }\r\n    \r\n              casesArray.push(data)\r\n            }\r\n          }\r\n        })\r\n      })\r\n    }\r\n    else {\r\n      const countryData = data[countryName]\r\n      latest_date = countryData[countryData.length - 1][\"date\"]\r\n\r\n      confirmedTotal = countryData[countryData.length - 1][\"confirmed\"]\r\n      recoveredTotal = countryData[countryData.length - 1][\"recovered\"]\r\n      deathTotal = countryData[countryData.length - 1][\"deaths\"]\r\n\r\n      confirmedNew = (countryData[countryData.length - 1][\"confirmed\"] - countryData[countryData.length - 2][\"confirmed\"])\r\n      recoveredNew = (countryData[countryData.length - 1][\"recovered\"] - countryData[countryData.length - 2][\"recovered\"])\r\n      deathNew = (countryData[countryData.length - 1][\"deaths\"] - countryData[countryData.length - 2][\"deaths\"])\r\n\r\n      countryData.forEach((country) => {\r\n        if (chartDate.includes(country[\"date\"])) {\r\n          const data = {\r\n            name: country[\"date\"],\r\n            total: country[\"confirmed\"],\r\n            active: country[\"confirmed\"] - (country[\"recovered\"] + country[\"deaths\"]),\r\n            recovered: country[\"recovered\"],\r\n            death: country[\"deaths\"]\r\n          }\r\n\r\n          casesArray.push(data)\r\n        }\r\n      })\r\n    }\r\n\r\n    infectedTotal = confirmedTotal - (recoveredTotal + deathTotal)\r\n    infectedNew = confirmedNew - (recoveredNew + deathNew)\r\n    return {\r\n      countriesName, data, latest_date, confirmedTotal, infectedTotal, recoveredTotal, deathTotal,\r\n      confirmedNew, infectedNew, recoveredNew, deathNew, casesArray\r\n    }\r\n  }\r\n  catch (err) {\r\n    console.log(err)\r\n  }\r\n}","import React, {useContext} from \"react\";\r\nimport {AppContext} from '../App'\r\n\r\nfunction Card() {\r\n  const fetchedData = useContext(AppContext);\r\n\r\n  return ( \r\n    <div className=\"container\">\r\n        <div className=\"data-collected\">\r\n          <div className=\"status\" id=\"confirmed\">\r\n            Tổng số ca nhiễm\r\n            <p>{fetchedData.confirmedTotal.toLocaleString()}</p>\r\n            <p>Hôm nay + {fetchedData.confirmedNew.toLocaleString()}</p>\r\n          </div>\r\n          <div className=\"status\" id=\"infected\">\r\n            Đang được chữa\r\n            <p>{fetchedData.infectedTotal.toLocaleString()}</p>\r\n            <p>Hôm nay + {fetchedData.infectedNew.toLocaleString()}</p>\r\n          </div>\r\n          <div className=\"status\" id=\"recovered\">\r\n            Khỏi bệnh\r\n            <p>{fetchedData.recoveredTotal.toLocaleString()}</p>\r\n            <p>Hôm nay + {fetchedData.recoveredNew.toLocaleString()}</p>\r\n          </div>\r\n          <div className=\"status\" id=\"death\">\r\n            Tử vong\r\n            <p>{fetchedData.deathTotal.toLocaleString()}</p>\r\n            <p>Hôm nay + {fetchedData.deathNew.toLocaleString()}</p>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n  }\r\n  \r\nexport default Card;","import React, { useContext } from \"react\";\r\nimport { AppContext } from '../App'\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\nfunction Chart(props) {\r\n    const fetchedData = useContext(AppContext);\r\n\r\n    return (\r\n        <div className=\"linechart\">\r\n            <h3>Biểu đồ {props.name}</h3>\r\n            <LineChart\r\n                width={1120}\r\n                height={500}\r\n                data={fetchedData.casesArray}\r\n                margin={{\r\n                    top: 5,\r\n                    right: 10,\r\n                    left: 0,\r\n                    bottom: 5\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"name\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line\r\n                    type=\"monotone\"\r\n                    dataKey=\"total\"\r\n                    stroke=\"#6666fa96\"\r\n                    name=\"Tổng ca nhiễm\"\r\n                />\r\n                <Line\r\n                    type=\"monotone\"\r\n                    dataKey=\"active\"\r\n                    stroke=\"#dd641396\"\r\n                    name=\"Đang được chữa\"\r\n                />\r\n                <Line\r\n                    type=\"monotone\"\r\n                    dataKey=\"recovered\"\r\n                    stroke=\"#36ded1\"\r\n                    name=\"Khỏi\"\r\n                />\r\n                <Line\r\n                    type=\"monotone\"\r\n                    dataKey=\"death\"\r\n                    stroke=\"#fa8181\"\r\n                    name=\"Tử vong\"\r\n                />\r\n            </LineChart>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useContext } from \"react\";\r\nimport { AppContext } from '../App'\r\nimport TextField from '@mui/material/TextField';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\n\r\nfunction CountryDropDown({setName}) {\r\n    const fetchedData = useContext(AppContext);\r\n\r\n    function handleChange(event, value) {\r\n        if(value) {\r\n            setName(value)\r\n        }\r\n        else {\r\n            setName('Thế giới')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Ngày cập nhật: {fetchedData.latest_date}</h3>\r\n            <Autocomplete\r\n                autoHighlight\r\n                sx={{ width: 1020 }}\r\n                className=\"combo-box-country\"\r\n                onChange={handleChange}\r\n                options={fetchedData.countriesName}\r\n                renderInput={(params) => <TextField {...params} label=\"Thế giới\" />}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryDropDown;","export default __webpack_public_path__ + \"static/media/banner.53d7b97d.png\";","import React, { useEffect, useState, createContext } from 'react';\nimport { fetchData } from './api/api'\nimport Card from './components/Card';\nimport Chart from './components/Chart';\nimport CountryDropDown from './components/CountryDropdown';\nimport banner from './assets/images/banner.png';\nimport * as ReactBootstrap from 'react-bootstrap';\n\nexport const AppContext = createContext(undefined);\n\nfunction App() {\n  const [fetch, SetFetch] = useState()\n  const [loading, SetLoading] = useState(false)\n  const [name, setName] = useState('Thế giới')\n\n  useEffect(() => {\n    fetchData(name).then((res) => SetFetch(res))\n    SetLoading(true)\n  }, [name])\n\n  console.log(fetch)\n  console.log(name)\n\n  return (\n    <div className=\"container\">\n      <img className='banner' src={banner} alt=\"banner\" />\n      {loading ? \n      fetch && <AppContext.Provider value={fetch}>\n        <CountryDropDown setName={setName} />\n        <Card />\n        <Chart name={name} />\n      </AppContext.Provider>\n      :\n      <ReactBootstrap.Spinner className='spinner-bootstrap' animation=\"border\" />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './sass/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}